variables:
  BuildConfiguration: Release
  PackageVersion: '2.0.1'

trigger:
  branches:
    include:
    - master
  paths:
    exclude:
    - README.md
    - CHANGELOG.md
    - LATEST_CHANGE.md
    - azure-pipelines.yml

pr:
  branches:
    include:
    - master
  paths:
    exclude:
    - README.md
    - CHANGELOG.md
    - LATEST_CHANGE.md
    - azure-pipelines.yml

pool:
  vmImage: 'windows-latest'

stages:
- stage: generate_package
  displayName: Build Artifact
  jobs:
  - job: create_artifact
    displayName: Build Package
    steps:
      - task: NuGetToolInstaller@1
        displayName: Install NuGet
        inputs:
          versionSpec: 
          checkLatest: true
      - task: NuGetCommand@2
        displayName: Restore Packages
        inputs:
          command: 'restore'
          restoreSolution: '**/*.sln'
          feedsToUse: 'select'
      - task: MSBuild@1
        displayName: Build Solution
        inputs:
          solution: '**/*.sln'
          configuration: $(BuildConfiguration)
      - task: VSTest@2
        displayName: Run Unit Tests
        inputs:
          testSelector: 'testAssemblies'
          testAssemblyVer2: |
            **\*UnitTests*.dll
            !**\*TestAdapter.dll
            !**\obj\**
            !**\xunit.runner.visualstudio.testadapter.dll
            !**\xunit.runner.visualstudio.dotnetcore.testadapter.dll
          searchFolder: '$(System.DefaultWorkingDirectory)'
          minimumExpectedTests: 1,
          failOnMinTestsNotRun: true
      - task: PublishTestResults@2
        displayName: Publish Unit Tests
        inputs:
          testResultsFormat: 'XUnit'
          testResultsFiles: '*.trx'
          searchFolder: '$(Agent.TempDirectory)\TestResults'
          buildConfiguration: '$(BuildConfiguration)'      
      - task: NuGetCommand@2
        displayName: Create Package
        inputs:
          command: pack
          # versioningScheme: byEnvVar
          # versionEnvVar: PackageVersion
          packagesToPack: '**/*.csproj;!**/*Tests.csproj;!**/*Example.csproj'
      - task: CopyFiles@2
        displayName: Copy Release Notes
        condition: ne(variables['Build.Reason'], 'PullRequest')
        inputs:
          SourceFolder: '$(Build.SourcesDirectory)'
          Contents: '**/LATEST_CHANGE.md'
          TargetFolder: '$(Build.ArtifactStagingDirectory)'
      - task: PublishBuildArtifacts@1
        displayName: Push Artifact
        condition: ne(variables['Build.Reason'], 'PullRequest')
        inputs:
          PathtoPublish: '$(Build.ArtifactStagingDirectory)'
          ArtifactName: 'drop'
          publishLocation: 'Container'
# - stage: release_public_feed
#   dependsOn: generate_package
#   condition: and(succeeded(), ne(variables['Build.Reason'], 'PullRequest'))
#   displayName: Release
#   jobs:
#   - deployment: push
#     displayName: Release Package
#     environment: NuGet
#     strategy:
#       runOnce:
#         deploy:
#           steps:
#           - task: NuGetCommand@2
#             displayName: Push to NuGet
#             inputs:
#               command: 'push'
#               packagesToPush: '$(Pipeline.Workspace)/**/drop/*.nupkg'
#               nuGetFeedType: 'external'
#               publishFeedCredentials: 'Nuget - CouchDB'
#           - task: GitHubRelease@1
#             displayName: GitHub Release Notes
#             inputs:
#               gitHubConnection: 'CouchDB - GitHub'
#               repositoryName: '$(Build.Repository.Name)'
#               action: 'create'
#               target: '$(Build.SourceVersion)'
#               tagSource: 'userSpecifiedTag'
#               tag: 'v$(PackageVersion)'
#               title: 'v$(PackageVersion)'
#               releaseNotesFilePath: '$(Pipeline.Workspace)/**/drop/LATEST_CHANGE.md'
#               assets: '$(Pipeline.Workspace)/**/drop/*.nupkg'
#               changeLogCompareToRelease: 'lastFullRelease'
#               changeLogType: 'issueBased'
#               changeLogLabels: |
#                 [
#                   { "label" : "feature", "displayName" : "Features", "state" : "closed" }
#                   { "label" : "enhancement", "displayName" : "Improvements", "state" : "closed" },
#                   { "label" : "bug", "displayName" : "Bugs", "state" : "closed" },
#                 ]